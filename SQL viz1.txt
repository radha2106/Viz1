-- Agent Table

CREATE TABLE agents
(
    idx serial NOT NULL,
    emp_code character varying(25) NOT NULL GENERATED ALWAYS AS ((((idx)::text || "left"((first_name)::text, 1)) || "left"((last_name)::text, 1))) STORED,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    lob character varying(10) NOT NULL,
    wave character varying(10) NOT NULL,
    hire_date bigint NOT NULL,
    CONSTRAINT agents_pkey PRIMARY KEY (emp_code),
    CONSTRAINT agents_idx_key UNIQUE (idx),
	FOREIGN KEY (hire_date) REFERENCES calendar(idx)
);

CREATE INDEX departments
    ON agents 
    (lob);

CREATE INDEX fullname
    ON agents 
    (first_name, last_name);
--------------------------------------------------------------
-- Modes Tables

CREATE TABLE  modes
(
    idx serial NOT NULL,
    catg character varying(50) NOT NULL,
    CONSTRAINT modes_pkey PRIMARY KEY (idx),
    CONSTRAINT catg_key UNIQUE (catg)
);

CREATE INDEX  category_name
    ON modes 
    (catg)
--------------------------------------------------------------
-- Table absences

CREATE TABLE absences
(
    ddate bigint NOT NULL,
    agent_id character varying(25) NOT NULL,
    lob character varying(10) NOT NULL,
	FOREIGN KEY (ddate) REFERENCES calendar (idx) ON UPDATE NO ACTION ON DELETE RESTRICT,
	FOREIGN KEY (agent_id) REFERENCES agents (emp_code) ON UPDATE NO ACTION ON DELETE RESTRICT
);

CREATE INDEX agent_date_absence
    ON absences
    (agent_id,ddate);
------------------------------------------------------------------
-- Table Chats

CREATE TABLE chat
(
    idx serial NOT NULL UNIQUE,
    ddate bigint NOT NULL,
    agent_id character varying(25) NOT NULL,
    catg_id bigint NOT NULL,
    rating bigint CHECK(rating IN(0,1)) NOT NULL,
    aht time without time zone NOT NULL,
	FOREIGN KEY (agent_id) REFERENCES agents (emp_code)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    FOREIGN KEY (catg_id) REFERENCES modes (idx)
		ON UPDATE CASCADE
        ON DELETE RESTRICT,
	FOREIGN KEY (ddate) REFERENCES calendar (idx)
		ON UPDATE RESTRICT
        ON DELETE RESTRICT);

CREATE INDEX agent_on_chat
    ON chat
    (agent_id,ddate,catg_id);
-----------------------------------
-- Table emails

CREATE TABLE emails
(
    idx serial NOT NULL UNIQUE,
    ddate bigint NOT NULL,
    agent_id character varying(25) NOT NULL,
    catg_id bigint NOT NULL,
    rate bigint NOT NULL CHECK(rate IN(0,1)),
    FOREIGN KEY (agent_id) REFERENCES agents (emp_code) 
        ON UPDATE NO ACTION
        ON DELETE RESTRICT,
    FOREIGN KEY (catg_id) REFERENCES modes (idx)
        ON UPDATE NO ACTION
        ON DELETE RESTRICT,
    FOREIGN KEY (ddate) REFERENCES calendar (idx)
        ON UPDATE NO ACTION
        ON DELETE RESTRICT);

CREATE INDEX agent_on_email
    ON emails
    (agent_id,ddate,catg_id);
-----------------------------------------------------------
-- Table phone

CREATE TABLE phone
(
    idx serial NOT NULL UNIQUE,
    ddate bigint NOT NULL,
    agent_id character varying(25) NOT NULL,
    catg_id bigint NOT NULL,
    rating bigint NOT NULL CHECK(rating IN(0,1)),
    aht time without time zone NOT NULL,
    FOREIGN KEY (agent_id) REFERENCES agents (emp_code) 
        ON UPDATE NO ACTION
        ON DELETE RESTRICT,
    FOREIGN KEY (catg_id) REFERENCES modes (idx) 
        ON UPDATE NO ACTION
        ON DELETE RESTRICT,
	FOREIGN KEY (ddate) REFERENCES calendar (idx) 
        ON UPDATE NO ACTION
        ON DELETE RESTRICT
);

CREATE INDEX agent_on_phone
    ON phone
    (agent_id,ddate,catg_id);
-------------------------------------------------------------------
-- Table qa

CREATE TABLE qa_score
(
    ddate bigint NOT NULL,
    agent_id character varying(25) NOT NULL,
    lob character varying(10) NOT NULL,
    score1 bigint NOT NULL CHECK (score1 >= 70 AND score1 <= 100),
    score2 bigint NOT NULL CHECK (score1 >= 70 AND score1 <= 100),
    FOREIGN KEY (agent_id) REFERENCES agents (emp_code)
        ON UPDATE NO ACTION
        ON DELETE RESTRICT,
	FOREIGN KEY (ddate) REFERENCES calendar (idx)
        ON UPDATE NO ACTION
        ON DELETE RESTRICT);

CREATE INDEX agent_scored
    ON qa_score
    (agent_id,ddate)
------------------------------------------------------------------------
-- Create Functions
CREATE OR REPLACE FUNCTION check_chat_agents() 
RETURNS TRIGGER 
AS $$
BEGIN
    IF NOT EXISTS (
        SELECT emp_code
        FROM agents
        WHERE emp_code = NEW.agent_id AND lob = 'chat' ---change department
    ) THEN
        RAISE EXCEPTION 'Agent is not in the "chat" department'; ---change department
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
--------------------------------------------
-- Create Triggers
CREATE OR REPLACE TRIGGER phone_agents --change name
    BEFORE INSERT OR UPDATE 
    ON phone --change table
    FOR EACH ROW
    EXECUTE FUNCTION check_phone_agents(); --change function
------------------------------------------------------
CREATE VIEW newsharelove.email_metrics
AS
WITH dates_work AS ( --days available to work
SELECT cal.max_iddate,
count(DISTINCT em_1.ddate) AS labor_days
FROM newsharelove.calendar cal
JOIN newsharelove.emails em_1 ON em_1.ddate = cal.idx
GROUP BY cal.max_iddate),

email_metric AS ( --emails sent and goal to be meet
SELECT em_1.agent_id,
cal.max_iddate AS dates_id,
count(*) AS emails_sent,
CASE
WHEN ag.wave::text = 'e1'::text AND cal.months < 4 THEN 48
WHEN ag.wave::text = 'e1'::text AND cal.months < 7 THEN 72
WHEN ag.wave::text = 'e1'::text AND cal.months > 6 THEN 96
WHEN ag.wave::text = 'e2'::text AND cal.months < 10 THEN 48
WHEN ag.wave::text = 'e2'::text AND cal.months > 9 THEN 72
ELSE NULL::integer
END AS goal_email
FROM newsharelove.emails em_1
JOIN newsharelove.calendar cal ON em_1.ddate = cal.idx
JOIN newsharelove.agents ag ON em_1.agent_id::text = ag.emp_code::text
GROUP BY em_1.agent_id, cal.max_iddate, ag.wave, cal.months)

SELECT em.dates_id,
em.agent_id,
em.emails_sent,
dw.labor_days * em.goal_email AS goals
FROM dates_work dw
JOIN email_metric em ON dw.max_iddate = em.dates_id;
------------------------------------------------------
CREATE OR REPLACE VIEW newsharelove.wk_abs_phone --change name of view depending on lob
AS
WITH workdays AS ( --worked days for phone agents
SELECT phone.agent_id,
cal.max_iddate AS dates_id,
count(DISTINCT phone.ddate) AS day_worked
FROM newsharelove.phone AS phone --change table and columns accordingly
JOIN newsharelove.calendar AS cal ON cal.idx = phone.ddate
GROUP BY phone.agent_id, cal.max_iddate
ORDER BY cal.max_iddate), 
absences AS ( --absences days for phone agents
SELECT abse.agent_id,
abse.lob,
cal.max_iddate AS dates_id,
count(DISTINCT abse.ddate) AS day_missed
FROM newsharelove.absences AS abse
JOIN newsharelove.calendar AS cal ON cal.idx = abse.ddate
WHERE abse.lob = 'phones' --change lob
GROUP BY abse.agent_id, cal.max_iddate, abse.lob
ORDER BY cal.max_iddate)
 SELECT wk.agent_id,
    wk.dates_id,
    wk.day_worked,
    ab.day_missed
   FROM workdays wk
     JOIN absences ab ON wk.agent_id = ab.agent_id AND wk.dates_id = ab.dates_id;